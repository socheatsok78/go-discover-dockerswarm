diff --git a/agent/auto-config/server_addr.go b/agent/auto-config/server_addr.go
index 6bca15d..05b365b 100644
--- a/agent/auto-config/server_addr.go
+++ b/agent/auto-config/server_addr.go
@@ -9,6 +9,7 @@ import (
 	"strconv"
 	"strings"
 
+	discoverdockerswarm "github.com/hashicorp/consul/dockerswarm"
 	"github.com/hashicorp/consul/lib"
 	"github.com/hashicorp/go-discover"
 	discoverk8s "github.com/hashicorp/go-discover/provider/k8s"
@@ -22,6 +23,7 @@ func (ac *AutoConfig) discoverServers(servers []string) ([]string, error) {
 		providers[k] = v
 	}
 	providers["k8s"] = &discoverk8s.Provider{}
+	providers["dockerswarm"] = &discoverdockerswarm.Provider{}
 
 	disco, err := discover.New(
 		discover.WithUserAgent(lib.UserAgent()),
diff --git a/agent/retry_join.go b/agent/retry_join.go
index eb010c0..115faaf 100644
--- a/agent/retry_join.go
+++ b/agent/retry_join.go
@@ -11,6 +11,7 @@ import (
 	discoverhcp "github.com/hashicorp/consul/agent/hcp/discover"
 	discover "github.com/hashicorp/go-discover"
 	discoverk8s "github.com/hashicorp/go-discover/provider/k8s"
+	discoverdockerswarm "github.com/hashicorp/consul/dockerswarm"
 	"github.com/hashicorp/go-hclog"
 
 	"github.com/hashicorp/consul/lib"
@@ -117,6 +118,7 @@ func newDiscover() (*discover.Discover, error) {
 	}
 	providers["k8s"] = &discoverk8s.Provider{}
 	providers["hcp"] = &discoverhcp.Provider{}
+	providers["dockerswarm"] = &discoverdockerswarm.Provider{}
 
 	return discover.New(
 		discover.WithUserAgent(lib.UserAgent()),
diff --git a/dockerswarm/dockerswarm_discover.go b/dockerswarm/dockerswarm_discover.go
new file mode 100644
index 0000000..2aaf84f
--- /dev/null
+++ b/dockerswarm/dockerswarm_discover.go
@@ -0,0 +1,109 @@
+// Package dockerswarm provides service discovery for Docker Service.
+package dockerswarm
+
+import (
+	"context"
+	"fmt"
+	"log"
+	"slices"
+
+	"github.com/docker/docker/api/types"
+	"github.com/docker/docker/api/types/filters"
+	"github.com/docker/docker/api/types/swarm"
+	"github.com/docker/docker/client"
+)
+
+type Provider struct{}
+
+func (p *Provider) Help() string {
+	return `Docker Swarm:
+
+    provider:         "dockerswarm"
+    namespace:        Namespace to search for services (defaults to "default").
+    service:          Service name to search for.
+    network:          Network selector value to filter services (defaults to "{{namespace}}_default").
+    host_network:     "true" if service host IP and ports should be used.
+`
+}
+
+func (p *Provider) Addrs(args map[string]string, l *log.Logger) ([]string, error) {
+	if args["provider"] != "dockerswarm" {
+		return nil, fmt.Errorf("discover-dockerswarm: invalid provider " + args["provider"])
+	}
+
+	ctx := context.Background()
+
+	cli, err := client.NewClientWithOpts(client.WithAPIVersionNegotiation())
+	if err != nil {
+		return nil, fmt.Errorf("discover-dockerswarm: %s", err)
+	}
+
+	namespace := args["namespace"]
+	if namespace == "" {
+		namespace = "default"
+	}
+
+	service := args["service"]
+	if service == "" {
+		return nil, fmt.Errorf("discover-dockerswarm: service name is required")
+	}
+	service = fmt.Sprintf("%s_%s", namespace, service)
+
+	// List all tasks in the Docker Swarm's services.
+	tasks, err := cli.TaskList(ctx, types.TaskListOptions{
+		Filters: filters.NewArgs(
+			filters.Arg("service", service),
+		),
+	})
+	if err != nil {
+		return nil, fmt.Errorf("discover-dockerswarm: %s", err)
+	}
+
+	return TaskAddrs(tasks, args, l)
+}
+
+func TaskAddrs(tasks []swarm.Task, args map[string]string, l *log.Logger) ([]string, error) {
+	var addrs []string
+
+	namespace := args["namespace"]
+	if namespace == "" {
+		namespace = "default"
+	}
+
+	service := args["service"]
+	if service == "" {
+		return nil, fmt.Errorf("discover-dockerswarm: service name is required")
+	}
+	service = fmt.Sprintf("%s_%s", namespace, service)
+
+	networkSelector := args["network"]
+	if networkSelector == "" {
+		networkSelector = "default"
+	}
+	networkSelector = fmt.Sprintf("%s_%s", namespace, networkSelector)
+
+	for _, task := range tasks {
+		if task.Status.State != swarm.TaskStateRunning {
+			l.Printf("[DEBUG] discover-dockerswarm: ignoring task %q, not ready state", fmt.Sprintf("%s.%d.%s", service, task.Slot, task.ID))
+			continue
+		}
+
+		if task.NetworksAttachments == nil {
+			continue
+		}
+
+		for _, network := range task.NetworksAttachments {
+			if network.Network.Spec.Name == networkSelector {
+				for _, addr := range network.Addresses {
+					addr = addr[:len(addr)-3] // Remove the subnet mask.
+					if slices.Contains(addrs, addr) {
+						continue
+					}
+					addrs = append(addrs, addr)
+				}
+			}
+		}
+	}
+
+	return addrs, nil
+}
